(define (cube x)
  (* x x x))

(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a) 
      	 (sum term (next a) next b))
  ))

(define (integral f a b dx)
  (define (add-dx x)
    (+ x dx))

  (* (sum f (+ a (/ dx 2.0)) add-dx b) 
  	 dx)
)

(define (simpson f a b n)
  (define (h)
    (/ (- b a) n))

  (define (param k)
    (+ a (* k (h))))

  (define (y k)
    (cond ((= k 0) (f (param k)))
    	  ((= k n) (f (param k)))
          ((= (remainder k 2) 0) (* 2 (f (param k))))
          (else (* 4 (f (param k))))
      ))

  (define (add-one x)
    (+ x 1))

  (/ (* (h) 
        (sum y 0 add-one n))
  	 3
  )
)