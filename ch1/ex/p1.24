(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp) (remainder (square (expmod base (/ exp 2) m)) m))
        (else (remainder (* base (expmod base (- exp 1) m)) m))
  )
)

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))

  (try-it (+ 1 (random (- n 1))))
)

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)
  )
)

(define (divides? a b)
  (= (remainder a b) 0)
)

(define (prime? n)
  (fast-prime? n 10)
)

(define (next-odd n)
  (if (divides? n 2)
      (+ n 1)
      (+ n 2)
  )
)

(define (find-primes n found count)
  (if (< found count)
 	(if (prime? n)
 		(begin
 			(newline)
 			(display n)
 	    	(find-primes (next-odd n) (+ found 1) count)
 	    )
 	    (find-primes (next-odd n) found count)
 	)
 )
)

(define (search-for-primes n)
  (define (start-search start-time)
  	(find-primes (next-odd (- n 1)) 0 3)
  	(newline)
  	(display (- (real-time-clock) start-time))
  )

  (start-search (real-time-clock))
)